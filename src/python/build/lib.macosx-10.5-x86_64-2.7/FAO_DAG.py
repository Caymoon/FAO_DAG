# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_FAO_DAG', [dirname(__file__)])
        except ImportError:
            import _FAO_DAG
            return _FAO_DAG
        if fp is not None:
            try:
                _mod = imp.load_module('_FAO_DAG', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _FAO_DAG = swig_import_helper()
    del swig_import_helper
else:
    import _FAO_DAG
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _FAO_DAG.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _FAO_DAG.SwigPyIterator_value(self)
    def incr(self, n=1): return _FAO_DAG.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _FAO_DAG.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _FAO_DAG.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _FAO_DAG.SwigPyIterator_equal(self, *args)
    def copy(self): return _FAO_DAG.SwigPyIterator_copy(self)
    def next(self): return _FAO_DAG.SwigPyIterator_next(self)
    def __next__(self): return _FAO_DAG.SwigPyIterator___next__(self)
    def previous(self): return _FAO_DAG.SwigPyIterator_previous(self)
    def advance(self, *args): return _FAO_DAG.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _FAO_DAG.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _FAO_DAG.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _FAO_DAG.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _FAO_DAG.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _FAO_DAG.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _FAO_DAG.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _FAO_DAG.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

VARIABLE = _FAO_DAG.VARIABLE
PROMOTE = _FAO_DAG.PROMOTE
MUL = _FAO_DAG.MUL
RMUL = _FAO_DAG.RMUL
MUL_ELEM = _FAO_DAG.MUL_ELEM
DIV = _FAO_DAG.DIV
SUM = _FAO_DAG.SUM
NEG = _FAO_DAG.NEG
INDEX = _FAO_DAG.INDEX
TRANSPOSE = _FAO_DAG.TRANSPOSE
SUM_ENTRIES = _FAO_DAG.SUM_ENTRIES
TRACE = _FAO_DAG.TRACE
RESHAPE = _FAO_DAG.RESHAPE
DIAG_VEC = _FAO_DAG.DIAG_VEC
DIAG_MAT = _FAO_DAG.DIAG_MAT
UPPER_TRI = _FAO_DAG.UPPER_TRI
CONV = _FAO_DAG.CONV
HSTACK = _FAO_DAG.HSTACK
VSTACK = _FAO_DAG.VSTACK
SCALAR_CONST = _FAO_DAG.SCALAR_CONST
DENSE_CONST = _FAO_DAG.DENSE_CONST
SPARSE_CONST = _FAO_DAG.SPARSE_CONST
NO_OP = _FAO_DAG.NO_OP
SPLIT = _FAO_DAG.SPLIT
COPY = _FAO_DAG.COPY
class Constant(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Constant, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Constant, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _FAO_DAG.new_Constant()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _FAO_DAG.delete_Constant
    __del__ = lambda self : None;
Constant_swigregister = _FAO_DAG.Constant_swigregister
Constant_swigregister(Constant)
cvar = _FAO_DAG.cvar
CONSTANT_ID = cvar.CONSTANT_ID

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _FAO_DAG.IntVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _FAO_DAG.IntVector___nonzero__(self)
    def __bool__(self): return _FAO_DAG.IntVector___bool__(self)
    def __len__(self): return _FAO_DAG.IntVector___len__(self)
    def pop(self): return _FAO_DAG.IntVector_pop(self)
    def __getslice__(self, *args): return _FAO_DAG.IntVector___getslice__(self, *args)
    def __setslice__(self, *args): return _FAO_DAG.IntVector___setslice__(self, *args)
    def __delslice__(self, *args): return _FAO_DAG.IntVector___delslice__(self, *args)
    def __delitem__(self, *args): return _FAO_DAG.IntVector___delitem__(self, *args)
    def __getitem__(self, *args): return _FAO_DAG.IntVector___getitem__(self, *args)
    def __setitem__(self, *args): return _FAO_DAG.IntVector___setitem__(self, *args)
    def append(self, *args): return _FAO_DAG.IntVector_append(self, *args)
    def empty(self): return _FAO_DAG.IntVector_empty(self)
    def size(self): return _FAO_DAG.IntVector_size(self)
    def clear(self): return _FAO_DAG.IntVector_clear(self)
    def swap(self, *args): return _FAO_DAG.IntVector_swap(self, *args)
    def get_allocator(self): return _FAO_DAG.IntVector_get_allocator(self)
    def begin(self): return _FAO_DAG.IntVector_begin(self)
    def end(self): return _FAO_DAG.IntVector_end(self)
    def rbegin(self): return _FAO_DAG.IntVector_rbegin(self)
    def rend(self): return _FAO_DAG.IntVector_rend(self)
    def pop_back(self): return _FAO_DAG.IntVector_pop_back(self)
    def erase(self, *args): return _FAO_DAG.IntVector_erase(self, *args)
    def __init__(self, *args): 
        this = _FAO_DAG.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _FAO_DAG.IntVector_push_back(self, *args)
    def front(self): return _FAO_DAG.IntVector_front(self)
    def back(self): return _FAO_DAG.IntVector_back(self)
    def assign(self, *args): return _FAO_DAG.IntVector_assign(self, *args)
    def resize(self, *args): return _FAO_DAG.IntVector_resize(self, *args)
    def insert(self, *args): return _FAO_DAG.IntVector_insert(self, *args)
    def reserve(self, *args): return _FAO_DAG.IntVector_reserve(self, *args)
    def capacity(self): return _FAO_DAG.IntVector_capacity(self)
    __swig_destroy__ = _FAO_DAG.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _FAO_DAG.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _FAO_DAG.DoubleVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _FAO_DAG.DoubleVector___nonzero__(self)
    def __bool__(self): return _FAO_DAG.DoubleVector___bool__(self)
    def __len__(self): return _FAO_DAG.DoubleVector___len__(self)
    def pop(self): return _FAO_DAG.DoubleVector_pop(self)
    def __getslice__(self, *args): return _FAO_DAG.DoubleVector___getslice__(self, *args)
    def __setslice__(self, *args): return _FAO_DAG.DoubleVector___setslice__(self, *args)
    def __delslice__(self, *args): return _FAO_DAG.DoubleVector___delslice__(self, *args)
    def __delitem__(self, *args): return _FAO_DAG.DoubleVector___delitem__(self, *args)
    def __getitem__(self, *args): return _FAO_DAG.DoubleVector___getitem__(self, *args)
    def __setitem__(self, *args): return _FAO_DAG.DoubleVector___setitem__(self, *args)
    def append(self, *args): return _FAO_DAG.DoubleVector_append(self, *args)
    def empty(self): return _FAO_DAG.DoubleVector_empty(self)
    def size(self): return _FAO_DAG.DoubleVector_size(self)
    def clear(self): return _FAO_DAG.DoubleVector_clear(self)
    def swap(self, *args): return _FAO_DAG.DoubleVector_swap(self, *args)
    def get_allocator(self): return _FAO_DAG.DoubleVector_get_allocator(self)
    def begin(self): return _FAO_DAG.DoubleVector_begin(self)
    def end(self): return _FAO_DAG.DoubleVector_end(self)
    def rbegin(self): return _FAO_DAG.DoubleVector_rbegin(self)
    def rend(self): return _FAO_DAG.DoubleVector_rend(self)
    def pop_back(self): return _FAO_DAG.DoubleVector_pop_back(self)
    def erase(self, *args): return _FAO_DAG.DoubleVector_erase(self, *args)
    def __init__(self, *args): 
        this = _FAO_DAG.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _FAO_DAG.DoubleVector_push_back(self, *args)
    def front(self): return _FAO_DAG.DoubleVector_front(self)
    def back(self): return _FAO_DAG.DoubleVector_back(self)
    def assign(self, *args): return _FAO_DAG.DoubleVector_assign(self, *args)
    def resize(self, *args): return _FAO_DAG.DoubleVector_resize(self, *args)
    def insert(self, *args): return _FAO_DAG.DoubleVector_insert(self, *args)
    def reserve(self, *args): return _FAO_DAG.DoubleVector_reserve(self, *args)
    def capacity(self): return _FAO_DAG.DoubleVector_capacity(self)
    __swig_destroy__ = _FAO_DAG.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _FAO_DAG.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class IntVector2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector2D, name)
    __repr__ = _swig_repr
    def iterator(self): return _FAO_DAG.IntVector2D_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _FAO_DAG.IntVector2D___nonzero__(self)
    def __bool__(self): return _FAO_DAG.IntVector2D___bool__(self)
    def __len__(self): return _FAO_DAG.IntVector2D___len__(self)
    def pop(self): return _FAO_DAG.IntVector2D_pop(self)
    def __getslice__(self, *args): return _FAO_DAG.IntVector2D___getslice__(self, *args)
    def __setslice__(self, *args): return _FAO_DAG.IntVector2D___setslice__(self, *args)
    def __delslice__(self, *args): return _FAO_DAG.IntVector2D___delslice__(self, *args)
    def __delitem__(self, *args): return _FAO_DAG.IntVector2D___delitem__(self, *args)
    def __getitem__(self, *args): return _FAO_DAG.IntVector2D___getitem__(self, *args)
    def __setitem__(self, *args): return _FAO_DAG.IntVector2D___setitem__(self, *args)
    def append(self, *args): return _FAO_DAG.IntVector2D_append(self, *args)
    def empty(self): return _FAO_DAG.IntVector2D_empty(self)
    def size(self): return _FAO_DAG.IntVector2D_size(self)
    def clear(self): return _FAO_DAG.IntVector2D_clear(self)
    def swap(self, *args): return _FAO_DAG.IntVector2D_swap(self, *args)
    def get_allocator(self): return _FAO_DAG.IntVector2D_get_allocator(self)
    def begin(self): return _FAO_DAG.IntVector2D_begin(self)
    def end(self): return _FAO_DAG.IntVector2D_end(self)
    def rbegin(self): return _FAO_DAG.IntVector2D_rbegin(self)
    def rend(self): return _FAO_DAG.IntVector2D_rend(self)
    def pop_back(self): return _FAO_DAG.IntVector2D_pop_back(self)
    def erase(self, *args): return _FAO_DAG.IntVector2D_erase(self, *args)
    def __init__(self, *args): 
        this = _FAO_DAG.new_IntVector2D(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _FAO_DAG.IntVector2D_push_back(self, *args)
    def front(self): return _FAO_DAG.IntVector2D_front(self)
    def back(self): return _FAO_DAG.IntVector2D_back(self)
    def assign(self, *args): return _FAO_DAG.IntVector2D_assign(self, *args)
    def resize(self, *args): return _FAO_DAG.IntVector2D_resize(self, *args)
    def insert(self, *args): return _FAO_DAG.IntVector2D_insert(self, *args)
    def reserve(self, *args): return _FAO_DAG.IntVector2D_reserve(self, *args)
    def capacity(self): return _FAO_DAG.IntVector2D_capacity(self)
    __swig_destroy__ = _FAO_DAG.delete_IntVector2D
    __del__ = lambda self : None;
IntVector2D_swigregister = _FAO_DAG.IntVector2D_swigregister
IntVector2D_swigregister(IntVector2D)

class DoubleVector2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector2D, name)
    __repr__ = _swig_repr
    def iterator(self): return _FAO_DAG.DoubleVector2D_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _FAO_DAG.DoubleVector2D___nonzero__(self)
    def __bool__(self): return _FAO_DAG.DoubleVector2D___bool__(self)
    def __len__(self): return _FAO_DAG.DoubleVector2D___len__(self)
    def pop(self): return _FAO_DAG.DoubleVector2D_pop(self)
    def __getslice__(self, *args): return _FAO_DAG.DoubleVector2D___getslice__(self, *args)
    def __setslice__(self, *args): return _FAO_DAG.DoubleVector2D___setslice__(self, *args)
    def __delslice__(self, *args): return _FAO_DAG.DoubleVector2D___delslice__(self, *args)
    def __delitem__(self, *args): return _FAO_DAG.DoubleVector2D___delitem__(self, *args)
    def __getitem__(self, *args): return _FAO_DAG.DoubleVector2D___getitem__(self, *args)
    def __setitem__(self, *args): return _FAO_DAG.DoubleVector2D___setitem__(self, *args)
    def append(self, *args): return _FAO_DAG.DoubleVector2D_append(self, *args)
    def empty(self): return _FAO_DAG.DoubleVector2D_empty(self)
    def size(self): return _FAO_DAG.DoubleVector2D_size(self)
    def clear(self): return _FAO_DAG.DoubleVector2D_clear(self)
    def swap(self, *args): return _FAO_DAG.DoubleVector2D_swap(self, *args)
    def get_allocator(self): return _FAO_DAG.DoubleVector2D_get_allocator(self)
    def begin(self): return _FAO_DAG.DoubleVector2D_begin(self)
    def end(self): return _FAO_DAG.DoubleVector2D_end(self)
    def rbegin(self): return _FAO_DAG.DoubleVector2D_rbegin(self)
    def rend(self): return _FAO_DAG.DoubleVector2D_rend(self)
    def pop_back(self): return _FAO_DAG.DoubleVector2D_pop_back(self)
    def erase(self, *args): return _FAO_DAG.DoubleVector2D_erase(self, *args)
    def __init__(self, *args): 
        this = _FAO_DAG.new_DoubleVector2D(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _FAO_DAG.DoubleVector2D_push_back(self, *args)
    def front(self): return _FAO_DAG.DoubleVector2D_front(self)
    def back(self): return _FAO_DAG.DoubleVector2D_back(self)
    def assign(self, *args): return _FAO_DAG.DoubleVector2D_assign(self, *args)
    def resize(self, *args): return _FAO_DAG.DoubleVector2D_resize(self, *args)
    def insert(self, *args): return _FAO_DAG.DoubleVector2D_insert(self, *args)
    def reserve(self, *args): return _FAO_DAG.DoubleVector2D_reserve(self, *args)
    def capacity(self): return _FAO_DAG.DoubleVector2D_capacity(self)
    __swig_destroy__ = _FAO_DAG.delete_DoubleVector2D
    __del__ = lambda self : None;
DoubleVector2D_swigregister = _FAO_DAG.DoubleVector2D_swigregister
DoubleVector2D_swigregister(DoubleVector2D)

class IntIntMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntIntMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntIntMap, name)
    __repr__ = _swig_repr
    def iterator(self): return _FAO_DAG.IntIntMap_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _FAO_DAG.IntIntMap___nonzero__(self)
    def __bool__(self): return _FAO_DAG.IntIntMap___bool__(self)
    def __len__(self): return _FAO_DAG.IntIntMap___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _FAO_DAG.IntIntMap___getitem__(self, *args)
    def __delitem__(self, *args): return _FAO_DAG.IntIntMap___delitem__(self, *args)
    def has_key(self, *args): return _FAO_DAG.IntIntMap_has_key(self, *args)
    def keys(self): return _FAO_DAG.IntIntMap_keys(self)
    def values(self): return _FAO_DAG.IntIntMap_values(self)
    def items(self): return _FAO_DAG.IntIntMap_items(self)
    def __contains__(self, *args): return _FAO_DAG.IntIntMap___contains__(self, *args)
    def key_iterator(self): return _FAO_DAG.IntIntMap_key_iterator(self)
    def value_iterator(self): return _FAO_DAG.IntIntMap_value_iterator(self)
    def __setitem__(self, *args): return _FAO_DAG.IntIntMap___setitem__(self, *args)
    def asdict(self): return _FAO_DAG.IntIntMap_asdict(self)
    def __init__(self, *args): 
        this = _FAO_DAG.new_IntIntMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _FAO_DAG.IntIntMap_empty(self)
    def size(self): return _FAO_DAG.IntIntMap_size(self)
    def clear(self): return _FAO_DAG.IntIntMap_clear(self)
    def swap(self, *args): return _FAO_DAG.IntIntMap_swap(self, *args)
    def get_allocator(self): return _FAO_DAG.IntIntMap_get_allocator(self)
    def begin(self): return _FAO_DAG.IntIntMap_begin(self)
    def end(self): return _FAO_DAG.IntIntMap_end(self)
    def rbegin(self): return _FAO_DAG.IntIntMap_rbegin(self)
    def rend(self): return _FAO_DAG.IntIntMap_rend(self)
    def count(self, *args): return _FAO_DAG.IntIntMap_count(self, *args)
    def erase(self, *args): return _FAO_DAG.IntIntMap_erase(self, *args)
    def find(self, *args): return _FAO_DAG.IntIntMap_find(self, *args)
    def lower_bound(self, *args): return _FAO_DAG.IntIntMap_lower_bound(self, *args)
    def upper_bound(self, *args): return _FAO_DAG.IntIntMap_upper_bound(self, *args)
    __swig_destroy__ = _FAO_DAG.delete_IntIntMap
    __del__ = lambda self : None;
IntIntMap_swigregister = _FAO_DAG.IntIntMap_swigregister
IntIntMap_swigregister(IntIntMap)

class ConeConstraint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConeConstraint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConeConstraint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _FAO_DAG.new_ConeConstraint(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _FAO_DAG.ConeConstraint_first_set
    __swig_getmethods__["first"] = _FAO_DAG.ConeConstraint_first_get
    if _newclass:first = _swig_property(_FAO_DAG.ConeConstraint_first_get, _FAO_DAG.ConeConstraint_first_set)
    __swig_setmethods__["second"] = _FAO_DAG.ConeConstraint_second_set
    __swig_getmethods__["second"] = _FAO_DAG.ConeConstraint_second_get
    if _newclass:second = _swig_property(_FAO_DAG.ConeConstraint_second_get, _FAO_DAG.ConeConstraint_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _FAO_DAG.delete_ConeConstraint
    __del__ = lambda self : None;
ConeConstraint_swigregister = _FAO_DAG.ConeConstraint_swigregister
ConeConstraint_swigregister(ConeConstraint)

class ConeConstraintVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConeConstraintVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConeConstraintVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _FAO_DAG.ConeConstraintVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _FAO_DAG.ConeConstraintVector___nonzero__(self)
    def __bool__(self): return _FAO_DAG.ConeConstraintVector___bool__(self)
    def __len__(self): return _FAO_DAG.ConeConstraintVector___len__(self)
    def pop(self): return _FAO_DAG.ConeConstraintVector_pop(self)
    def __getslice__(self, *args): return _FAO_DAG.ConeConstraintVector___getslice__(self, *args)
    def __setslice__(self, *args): return _FAO_DAG.ConeConstraintVector___setslice__(self, *args)
    def __delslice__(self, *args): return _FAO_DAG.ConeConstraintVector___delslice__(self, *args)
    def __delitem__(self, *args): return _FAO_DAG.ConeConstraintVector___delitem__(self, *args)
    def __getitem__(self, *args): return _FAO_DAG.ConeConstraintVector___getitem__(self, *args)
    def __setitem__(self, *args): return _FAO_DAG.ConeConstraintVector___setitem__(self, *args)
    def append(self, *args): return _FAO_DAG.ConeConstraintVector_append(self, *args)
    def empty(self): return _FAO_DAG.ConeConstraintVector_empty(self)
    def size(self): return _FAO_DAG.ConeConstraintVector_size(self)
    def clear(self): return _FAO_DAG.ConeConstraintVector_clear(self)
    def swap(self, *args): return _FAO_DAG.ConeConstraintVector_swap(self, *args)
    def get_allocator(self): return _FAO_DAG.ConeConstraintVector_get_allocator(self)
    def begin(self): return _FAO_DAG.ConeConstraintVector_begin(self)
    def end(self): return _FAO_DAG.ConeConstraintVector_end(self)
    def rbegin(self): return _FAO_DAG.ConeConstraintVector_rbegin(self)
    def rend(self): return _FAO_DAG.ConeConstraintVector_rend(self)
    def pop_back(self): return _FAO_DAG.ConeConstraintVector_pop_back(self)
    def erase(self, *args): return _FAO_DAG.ConeConstraintVector_erase(self, *args)
    def __init__(self, *args): 
        this = _FAO_DAG.new_ConeConstraintVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _FAO_DAG.ConeConstraintVector_push_back(self, *args)
    def front(self): return _FAO_DAG.ConeConstraintVector_front(self)
    def back(self): return _FAO_DAG.ConeConstraintVector_back(self)
    def assign(self, *args): return _FAO_DAG.ConeConstraintVector_assign(self, *args)
    def resize(self, *args): return _FAO_DAG.ConeConstraintVector_resize(self, *args)
    def insert(self, *args): return _FAO_DAG.ConeConstraintVector_insert(self, *args)
    def reserve(self, *args): return _FAO_DAG.ConeConstraintVector_reserve(self, *args)
    def capacity(self): return _FAO_DAG.ConeConstraintVector_capacity(self)
    __swig_destroy__ = _FAO_DAG.delete_ConeConstraintVector
    __del__ = lambda self : None;
ConeConstraintVector_swigregister = _FAO_DAG.ConeConstraintVector_swigregister
ConeConstraintVector_swigregister(ConeConstraintVector)

# This file is compatible with both classic and new-style classes.


